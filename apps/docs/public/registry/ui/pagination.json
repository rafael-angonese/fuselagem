{
  "name": "pagination",
  "dependencies": [
    ""
  ],
  "files": [
    {
      "name": "pagination.tsx",
      "content": "import React from \"react\";\nimport { VariantProps, tv } from \"tailwind-variants\";\n\nconst paginationVariants = tv({\n  slots: {\n    base: \"flex flex-wrap gap-x-1\",\n    item: `data-[active=\"true\"]:text-white data-[active=\"true\"]:bg-blue-500 data-[active=\"true\"]:border data-[active=\"true\"]:border-gray-300 data-[active=\"true\"]:hover:bg-blue-600 data-[active=\"true\"]:dark:border-gray-600 data-[active=\"true\"]:dark:bg-gray-700`,\n    prev: \"\",\n    next: \"\",\n  },\n  variants: {\n    color: {\n      primary: {\n        container: \"bg-blue-400 dark:bg-blue-600\",\n      },\n      secondary: {\n        container: \"bg-purple-400 dark:bg-purple-600\",\n      },\n      success: {\n        container: \"bg-green-400 dark:bg-green-600\",\n      },\n      error: {\n        container: \"bg-red-400 dark:bg-red-600\",\n      },\n      warning: {\n        container: \"bg-yellow-400 dark:bg-yellow-600\",\n      },\n    },\n    size: {\n      xs: {},\n      sm: {},\n      md: {},\n      lg: {},\n      xl: {},\n    },\n    disabled: {\n      true: {},\n    },\n  },\n  compoundSlots: [\n    {\n      slots: [\"item\", \"prev\", \"next\"],\n      class: `items-center text-gray-700 transition-colors duration-300 transform bg-gray-100 rounded-md dark:bg-gray-800 dark:text-gray-200 hover:bg-blue-600 dark:hover:bg-blue-500 hover:text-white dark:hover:text-gray-200`,\n    },\n    {\n      slots: [\"item\", \"prev\", \"next\"],\n      size: \"xs\",\n      class: \"w-8 h-8 text-xs\",\n    },\n    {\n      slots: [\"item\", \"prev\", \"next\"],\n      size: \"sm\",\n      class: \"w-9 h-9 text-xs\",\n    },\n    {\n      slots: [\"item\", \"prev\", \"next\"],\n      size: \"md\",\n      class: \"w-10 h-10 text-md\",\n    },\n    {\n      slots: [\"item\", \"prev\", \"next\"],\n      size: \"lg\",\n      class: \"w-11 h-11 text-lg\",\n    },\n    {\n      slots: [\"item\", \"prev\", \"next\"],\n      size: \"xl\",\n      class: \"w-12 h-12 text-xl\",\n    },\n  ],\n  defaultVariants: {\n    color: \"primary\",\n    size: \"md\",\n  },\n});\n\ntype PaginationVariants = VariantProps<typeof paginationVariants>;\n\ninterface PaginationProps extends PaginationVariants {\n  page: number;\n  totalPages: number;\n  onPageChange: (value: number) => void;\n}\n\nconst Pagination: React.FC<PaginationProps> = ({\n  color,\n  size,\n  page,\n  totalPages,\n  onPageChange,\n}) => {\n  const { base, item, prev, next } = paginationVariants({\n    color,\n    size,\n  });\n\n  const LEFT_PAGE = \"LEFT\";\n  const RIGHT_PAGE = \"RIGHT\";\n  const pageNeighbours = 2;\n\n  const gotoPage = (value: number) => {\n    const currentPage = Math.max(0, Math.min(value, totalPages));\n\n    onPageChange(currentPage);\n  };\n\n  const range = (from: number, to: number, step = 1) => {\n    let i = from;\n    const range = [];\n\n    while (i <= to) {\n      range.push(i);\n      i += step;\n    }\n\n    return range;\n  };\n\n  const fetchPageNumbers = () => {\n    const totalNumbers = pageNeighbours * 2 + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    if (totalPages > totalBlocks) {\n      let pages = [];\n\n      const leftBound = page - pageNeighbours;\n      const rightBound = page + pageNeighbours;\n      const beforeLastPage = totalPages - 1;\n\n      const startPage = leftBound > 2 ? leftBound : 2;\n      const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\n\n      pages = range(startPage, endPage);\n\n      const pagesCount = pages.length;\n      const singleSpillOffset = totalNumbers - pagesCount - 1;\n\n      const leftSpill = startPage > 2;\n      const rightSpill = endPage < beforeLastPage;\n\n      const leftSpillPage = LEFT_PAGE;\n      const rightSpillPage = RIGHT_PAGE;\n\n      if (leftSpill && !rightSpill) {\n        const extraPages = range(startPage - singleSpillOffset, startPage - 1);\n        pages = [leftSpillPage, ...extraPages, ...pages];\n      } else if (!leftSpill && rightSpill) {\n        const extraPages = range(endPage + 1, endPage + singleSpillOffset);\n        pages = [...pages, ...extraPages, rightSpillPage];\n      } else if (leftSpill && rightSpill) {\n        pages = [leftSpillPage, ...pages, rightSpillPage];\n      }\n\n      return [1, ...pages, totalPages];\n    }\n\n    return range(1, totalPages);\n  };\n\n  const handleMoveRight = () => {\n    gotoPage(page + pageNeighbours * 2 + 1);\n  };\n\n  const handleMoveLeft = () => {\n    gotoPage(page - pageNeighbours * 2 - 1);\n  };\n\n  const pages = fetchPageNumbers();\n\n  return (\n    <>\n      <div className={base()}>\n        {pages.map((currentPage, index) => {\n          if (currentPage === LEFT_PAGE)\n            return (\n              <button className={prev()} key={index} onClick={handleMoveLeft}>\n                &laquo;\n              </button>\n            );\n\n          if (currentPage === RIGHT_PAGE)\n            return (\n              <button key={index} className={next()} onClick={handleMoveRight}>\n                &raquo;\n              </button>\n            );\n\n          return (\n            <button\n              className={item()}\n              data-active={page === currentPage ? true : false}\n              onClick={(event) => gotoPage(+currentPage)}\n              key={index}\n            >\n              {currentPage}\n            </button>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nPagination.displayName = \"Pagination\";\n\nexport { Pagination, paginationVariants };\n"
    }
  ],
  "type": "components:ui"
}